// <auto-generated />
using System;
using Invoice.API.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Invoices.API.Migrations
{
    [DbContext(typeof(InvoiceContext))]
    [Migration("20241203161808_AddInvoiceRelationships")]
    partial class AddInvoiceRelationships
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("Invoice.API.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "New York",
                            Country = "USA",
                            PostCode = "10001",
                            Street = "123 Main St"
                        },
                        new
                        {
                            Id = 2,
                            City = "Los Angeles",
                            Country = "USA",
                            PostCode = "90001",
                            Street = "456 Elm St"
                        },
                        new
                        {
                            Id = 3,
                            City = "Chicago",
                            Country = "USA",
                            PostCode = "60001",
                            Street = "789 Pine St"
                        },
                        new
                        {
                            Id = 4,
                            City = "San Francisco",
                            Country = "USA",
                            PostCode = "94101",
                            Street = "101 Maple St"
                        },
                        new
                        {
                            Id = 5,
                            City = "Miami",
                            Country = "USA",
                            PostCode = "33101",
                            Street = "202 Oak St"
                        },
                        new
                        {
                            Id = 6,
                            City = "Seattle",
                            Country = "USA",
                            PostCode = "98101",
                            Street = "303 Birch St"
                        },
                        new
                        {
                            Id = 7,
                            City = "Austin",
                            Country = "USA",
                            PostCode = "73301",
                            Street = "404 Cedar St"
                        },
                        new
                        {
                            Id = 8,
                            City = "Hawaii",
                            Country = "USA",
                            PostCode = "96801",
                            Street = "505 Pineapple St"
                        },
                        new
                        {
                            Id = 9,
                            City = "Dallas",
                            Country = "USA",
                            PostCode = "75201",
                            Street = "606 Magnolia St"
                        },
                        new
                        {
                            Id = 10,
                            City = "Atlanta",
                            Country = "USA",
                            PostCode = "30301",
                            Street = "707 Oak Tree St"
                        });
                });

            modelBuilder.Entity("Invoice.API.Entities.InvoiceEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("ClientAddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDue")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentTerms")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SenderAddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Total")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ClientAddressId");

                    b.HasIndex("SenderAddressId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = "INV-005",
                            ClientAddressId = 2,
                            ClientEmail = "john.doe@example.com",
                            ClientName = "John Doe",
                            CreatedAt = new DateTime(2024, 12, 3, 20, 18, 7, 800, DateTimeKind.Local).AddTicks(2346),
                            Description = "Consulting Services",
                            PaymentDue = new DateTime(2024, 12, 17, 20, 18, 7, 800, DateTimeKind.Local).AddTicks(2347),
                            PaymentTerms = 14,
                            SenderAddressId = 1,
                            Status = "pending",
                            Total = 1500.0
                        },
                        new
                        {
                            Id = "INV-006",
                            ClientAddressId = 2,
                            ClientEmail = "john.doe@example.com",
                            ClientName = "John Doe",
                            CreatedAt = new DateTime(2024, 12, 3, 20, 18, 7, 800, DateTimeKind.Local).AddTicks(2351),
                            Description = "Consulting Services",
                            PaymentDue = new DateTime(2025, 1, 2, 20, 18, 7, 800, DateTimeKind.Local).AddTicks(2352),
                            PaymentTerms = 30,
                            SenderAddressId = 1,
                            Status = "pending",
                            Total = 1500.0
                        },
                        new
                        {
                            Id = "INV-007",
                            ClientAddressId = 2,
                            ClientEmail = "sarah.lee@example.com",
                            ClientName = "Sarah Lee",
                            CreatedAt = new DateTime(2024, 12, 3, 20, 18, 7, 800, DateTimeKind.Local).AddTicks(2355),
                            Description = "Graphic Design",
                            PaymentDue = new DateTime(2024, 12, 17, 20, 18, 7, 800, DateTimeKind.Local).AddTicks(2355),
                            PaymentTerms = 14,
                            SenderAddressId = 1,
                            Status = "pending",
                            Total = 2000.0
                        },
                        new
                        {
                            Id = "INV-008",
                            ClientAddressId = 2,
                            ClientEmail = "sarah.lopez@example.com",
                            ClientName = "Sarah Lopez",
                            CreatedAt = new DateTime(2024, 12, 3, 20, 18, 7, 800, DateTimeKind.Local).AddTicks(2358),
                            Description = "architect Design",
                            PaymentDue = new DateTime(2024, 12, 17, 20, 18, 7, 800, DateTimeKind.Local).AddTicks(2358),
                            PaymentTerms = 14,
                            SenderAddressId = 1,
                            Status = "pending",
                            Total = 2000.0
                        },
                        new
                        {
                            Id = "INV-009",
                            ClientAddressId = 2,
                            ClientEmail = "sarah.lopez@example.com",
                            ClientName = "Sarah Lopez",
                            CreatedAt = new DateTime(2024, 12, 3, 20, 18, 7, 800, DateTimeKind.Local).AddTicks(2361),
                            Description = "architect Design",
                            PaymentDue = new DateTime(2024, 12, 17, 20, 18, 7, 800, DateTimeKind.Local).AddTicks(2362),
                            PaymentTerms = 14,
                            SenderAddressId = 1,
                            Status = "pending",
                            Total = 2000.0
                        });
                });

            modelBuilder.Entity("Invoice.API.Entities.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Total")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InvoiceId = "INV-005",
                            Name = "Brand Guidelines",
                            Price = 40.25,
                            Quantity = 2,
                            Total = 80.5
                        },
                        new
                        {
                            Id = 2,
                            InvoiceId = "INV-005",
                            Name = "Logo Design",
                            Price = 20.0,
                            Quantity = 5,
                            Total = 100.0
                        },
                        new
                        {
                            Id = 3,
                            InvoiceId = "INV-006",
                            Name = "Website Development",
                            Price = 500.0,
                            Quantity = 1,
                            Total = 500.0
                        },
                        new
                        {
                            Id = 4,
                            InvoiceId = "INV-006",
                            Name = "Hosting and Maintenance",
                            Price = 150.0,
                            Quantity = 3,
                            Total = 450.0
                        },
                        new
                        {
                            Id = 5,
                            InvoiceId = "INV-007",
                            Name = "Business Cards",
                            Price = 15.5,
                            Quantity = 10,
                            Total = 155.0
                        },
                        new
                        {
                            Id = 6,
                            InvoiceId = "INV-007",
                            Name = "Flyer Design",
                            Price = 75.0,
                            Quantity = 4,
                            Total = 300.0
                        },
                        new
                        {
                            Id = 7,
                            InvoiceId = "INV-008",
                            Name = "Social Media Posts",
                            Price = 25.0,
                            Quantity = 6,
                            Total = 150.0
                        },
                        new
                        {
                            Id = 8,
                            InvoiceId = "INV-009",
                            Name = "Marketing Campaign",
                            Price = 1000.0,
                            Quantity = 1,
                            Total = 1000.0
                        },
                        new
                        {
                            Id = 9,
                            InvoiceId = "INV-009",
                            Name = "SEO Optimization",
                            Price = 120.5,
                            Quantity = 2,
                            Total = 241.0
                        },
                        new
                        {
                            Id = 10,
                            InvoiceId = "INV-009",
                            Name = "Product Descriptions",
                            Price = 12.0,
                            Quantity = 8,
                            Total = 96.0
                        });
                });

            modelBuilder.Entity("Invoice.API.Entities.InvoiceEntity", b =>
                {
                    b.HasOne("Invoice.API.Entities.Address", "ClientAddress")
                        .WithMany()
                        .HasForeignKey("ClientAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Invoice.API.Entities.Address", "SenderAddress")
                        .WithMany()
                        .HasForeignKey("SenderAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientAddress");

                    b.Navigation("SenderAddress");
                });

            modelBuilder.Entity("Invoice.API.Entities.InvoiceItem", b =>
                {
                    b.HasOne("Invoice.API.Entities.InvoiceEntity", null)
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Invoice.API.Entities.InvoiceEntity", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
